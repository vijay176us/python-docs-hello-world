# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '8fb34984-b714-4afc-927b-07313c016ca9'
  
  # Web app name
  webAppName: 'webapp1-vk'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'webapp1-vk'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.7
  pythonVersion: '3.7'


- task: TerraformInstaller@0
  inputs:

- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'init'
    backendServiceArm: 'Pay-As-You-Go (9da99e9b-c378-4ac5-8d32-8410a83df14c)'
    backendAzureRmResourceGroupName: 'vk-testing'
    backendAzureRmStorageAccountName: 'storageaccountvk1'
    backendAzureRmContainerName: 'container1'
    backendAzureRmKey: 'BdWKLPJ/p1AVR2Xsmt1hYs4BcF3vrlI+7kl6pBTcVAODYj27FKEeWjcDGzDrkkXRp9ldToKYB351Fh1Eao7+2g=='
    terraformVersion: '0.12.3'

  
- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'validate'
    commandOptions: '-out=tfplan'
- task: TerraformTaskV1@0
  inputs:
    provider: 'azurerm'
    command: 'apply'
    commandOptions: 'tfplan -auto-approve'
    environmentServiceNameAzureRM: 'Pay-As-You-Go (9da99e9b-c378-4ac5-8d32-8410a83df14c)'

stages:
- stage: webAppDeploy
  displayName: WebApp Deploy
  jobs:
  - job: InfraDeployJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.12.3'
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Pay-As-You-Go (9da99e9b-c378-4ac5-8d32-8410a83df14c)'
        backendAzureRmResourceGroupName: 'vk-testing'
        backendAzureRmStorageAccountName: 'storageaccountvk1'
        backendAzureRmContainerName: 'container1'
        backendAzureRmKey: 'BdWKLPJ/p1AVR2Xsmt1hYs4BcF3vrlI+7kl6pBTcVAODYj27FKEeWjcDGzDrkkXRp9ldToKYB351Fh1Eao7+2g=='
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'validate'
        commandOptions: '-out=tfplan'
    - task: TerraformTaskV1@0
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'tfplan -auto-approve'
        environmentServiceNameAzureRM: 'Pay-As-You-Go (9da99e9b-c378-4ac5-8d32-8410a83df14c)'


- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : webapp1-vk'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip